"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const multer = require("multer");
const chitcore_1 = require("chitcore");
const upload = multer();
const router = express_1.Router();
router.post("/login", upload.none(), function (req, res, next) {
    var _a;
    if ((_a = req.session.user) === null || _a === void 0 ? void 0 : _a.loggedIn) {
        next();
        return;
    }
    if (req.body.user === "admin" && req.body.pwd === "admin") {
        req.session.user = {
            loggedIn: true,
            name: "admin"
        };
        res.status(200).json("LOGGED_IN");
    }
    else {
        res.status(401).json("LOGIN_FAILED");
    }
});
router.use(function auth(req, res, next) {
    var _a;
    if ((_a = req.session.user) === null || _a === void 0 ? void 0 : _a.loggedIn) {
        next();
        return;
    }
    res.status(401).render("error", { code: 401, title: "Forbidden!", message: "You are not allowed here." });
});
router.get("/login", (req, res, next) => res.status(200).json("LOGGED_IN"));
router.get("/logout", function (req, res, next) {
    req.session.destroy((err) => {
        if (err)
            throw err;
        res.status(200).json("LOGGED_OUT");
    });
});
let isPostgress = (process.env.DATABASE_URL) ? true : false;
const pgdbmgmt = new chitcore_1.Dbmgmt({ type: "postgres", url: process.env.DATABASE_URL });
let pgconnected = false;
let connectedUsers = 0;
async function pgconnect() {
    if (!pgconnected) {
        await pgdbmgmt.connect();
        pgconnected = true;
    }
    connectedUsers++;
    return;
}
async function pgclose() {
    if (pgconnected && connectedUsers <= 1) {
        await pgdbmgmt.close();
        pgconnected = false;
    }
    connectedUsers--;
    return;
}
router.ws("/dbmgmt", async function (ws, req) {
    // Ping Timer
    const pingInt = setInterval(() => {
        try {
            ws.ping();
        }
        catch (e) {
            console.log(e);
        }
    }, 5000);
    const user = req.session.user.name;
    let dbmgmt;
    // Opening connection
    if (isPostgress) {
        dbmgmt = pgdbmgmt;
        await pgconnect();
    }
    else {
        dbmgmt = new chitcore_1.Dbmgmt({ type: "sqlite", database: "./db/" + user + ".db" });
        await dbmgmt.connect();
    }
    // Binding listeners
    ws.on("message", async (data) => {
        if (typeof data !== "string")
            return;
        let args = JSON.parse(data);
        let response = await dbmgmt.runQuery(args);
        ws.send(JSON.stringify({ queryId: args.queryId, reply: response }));
    });
    // Closing connection
    ws.on("close", async (code) => {
        clearInterval(pingInt);
        if (isPostgress) {
            await pgclose();
        }
        else {
            await dbmgmt.close();
        }
    });
});
router.use((req, res, next) => next());
exports.default = router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JvdXRlcy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBaUM7QUFDakMsaUNBQWlDO0FBQ2pDLHVDQUFrQztBQUNsQyxNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUN4QixNQUFNLE1BQU0sR0FBRyxnQkFBTSxFQUFFLENBQUM7QUFFeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLFVBQVUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJOztJQUMzRCxVQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSwwQ0FBRSxRQUFRLEVBQUU7UUFDOUIsSUFBSSxFQUFFLENBQUM7UUFDUCxPQUFPO0tBQ1I7SUFFRCxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxPQUFPLEVBQUU7UUFDekQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUc7WUFDakIsUUFBUSxFQUFFLElBQUk7WUFDZCxJQUFJLEVBQUUsT0FBTztTQUNkLENBQUM7UUFDRixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNuQztTQUFNO1FBQ0wsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDdEM7QUFFSCxDQUFDLENBQUMsQ0FBQztBQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJOztJQUNyQyxVQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSwwQ0FBRSxRQUFRLEVBQUU7UUFDOUIsSUFBSSxFQUFFLENBQUM7UUFDUCxPQUFPO0tBQ1I7SUFD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