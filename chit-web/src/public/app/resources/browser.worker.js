!function(){"use strict";class e{constructor(e,s,n){this.chitIpcMain=e,this.dbmgmt=s,this.events={},this.config=n}on(e,s){this.events[e]=s}initialise(){this.chitIpcMain.on("ping",(e=>{var s;console.log("Recived ping from renderer"),console.log("Sending pong to the renderer"),e.sender.send("pong"),null===(s=this.events)||void 0===s||s.pingRecived()})),this.chitIpcMain.on("open-forms",((e,s,n)=>{this.events.openForm(s,n)})),this.chitIpcMain.on("show-message-box",((e,s)=>{this.events.showMessageBox(s,e.sender)})),this.chitIpcMain.on("show-open-dialog",(async(e,s)=>{const n=await this.events.showOpenDialog(s,e.sender);e.sender.send("show-open-dialog",n)})),this.chitIpcMain.on("open-external",((e,s)=>{this.events.openExternal(s)})),this.chitIpcMain.on("get-config",(e=>{e.returnValue=this.config})),this.chitIpcMain.on("update-config",(async(e,s)=>{console.log("Updating Configuration file ...");let n=!1;try{n=await this.events.updateConfig(s)}catch(s){throw e.sender.send("update-config",n),s}e.sender.send("update-config",n)})),this.chitIpcMain.on("db-query",(async(e,s)=>{let n=await this.dbmgmt.runQuery(s);e.sender.send("db-query-"+s.query,n)}))}}class s{constructor(e){this.today=new Date,this.orm=e}async connect(){return new Promise(((e,s)=>{this.socketAddress=("http:"===location.protocol?"ws":"wss")+"://"+location.host+"/api/dbmgmt",console.log("Web socket address",this.socketAddress),this.socket=new WebSocket(this.socketAddress),this.socket.onopen=s=>e(!0),this.socket.onerror=e=>console.log(e)}))}async closeDB(){this.socket.close()}async runQuery(e){return new Promise(((s,n)=>{const t=Math.floor(Math.random()*10**10);e.queryId=t,this.socket.send(JSON.stringify(e)),this.socket.addEventListener("message",(e=>{let n=JSON.parse(e.data);n.queryId===t&&s(n.reply)}))}))}}class n{constructor(){this.onceListeners={},this.listeners={},this.noOfPorts=0,this.ports={},this.connections={}}ipcmainevent(e){return{sender:e,reply:e.send}}addPort(e){const s=this.noOfPorts;this.ports[s]=e,this.connections[s]=new t(e,s),this.noOfPorts++;const n=this.connections[s];return e.addEventListener("message",(e=>{var t;console.log("IPCMain: Recived message ",e.data," from renderer ",s),(null===(t=e.data)||void 0===t?void 0:t.channel)&&(this.listeners[e.data.channel]&&this.listeners[e.data.channel].forEach((s=>{var t;return s(this.ipcmainevent(n),...null===(t=e.data)||void 0===t?void 0:t.args)})),this.onceListeners[e.data.channel]&&(this.onceListeners[e.data.channel].forEach((s=>{var t;return s(this.ipcmainevent(n),...null===(t=e.data)||void 0===t?void 0:t.args)})),this.onceListeners[e.data.channel]=null))})),e.postMessage({toIpcClass:!0,id:s}),n}on(e,s){return console.log("IPCMain:Adding event listener to ",e),this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(s),this}once(e,s){return this.onceListeners[e]||(this.onceListeners[e]=[]),this.onceListeners[e].push(s),this}}class t{constructor(e,s){this.port=e,this.id=s}send(e,...s){console.log("IPCMain: Sending ",e,s," to renderer ",this.id),this.port.postMessage({channel:e,args:s})}}!function(...e){console.log("ConsoleFromWorker:",...e)}("Shared worker started");const o={configPath:null,databaseFile:{isCustom:!1},isDevelopement:!1,theme:"system",updates:{autoCheck:!0,autoDownload:!1},vueApp:"/app"};!async function(){const t=new n,i=new s;i.connect(),console.log("Connected to the database");const a=new e(t,i,o);self.addEventListener("connect",(e=>{const s=e.ports[0];s.start();const n=t.addPort(s);console.log(n),n.send("ipc",{command:"console",data:[i.socket.url,i.socketAddress]}),0===n.id&&(a.on("openExternal",(e=>{n.send("ipc",{command:"openExternal",url:e})})),a.on("openForm",((e,s)=>{n.send("ipc",{command:"openForm",type:e,args:s})})),a.on("pingRecived",(()=>{})),a.on("showMessageBox",((e,s)=>new Promise(((n,o)=>{s.send("ipc",{command:"showMessageBox",options:e}),t.once("ipc-showMessageBox",((e,s)=>{n(s)}))})))),a.on("showOpenDialog",(async()=>{})),a.on("updateConfig",(e=>new Promise(((s,o)=>{n.send("ipc",{command:"updateConfig",newConfig:e}),t.once("ipc-updateConfig",(e=>{s(!0)}))})))),a.initialise()),s.addEventListener("message",(e=>{var s;console.log("SharedWorker: Recived message ",e.data),"config"===(null===(s=e.data)||void 0===s?void 0:s.command)&&Object.keys(e.data.config).forEach((s=>{o[s]=e.data.config[s]}))}))}))}()}();
