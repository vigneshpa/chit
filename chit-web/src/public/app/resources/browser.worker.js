!function(){"use strict";class e{constructor(e,s){this.port=e,this.id=s}send(e,...s){console.log("IPCMain: Sending ",e,s," to renderer ",this.id),this.port.postMessage({channel:e,args:s})}}!function(...e){console.log("ConsoleFromWorker:",...e)}("Shared worker started");const s={configPath:null,databaseFile:{isCustom:!1},isDevelopement:!1,theme:"system",updates:{autoCheck:!0,autoDownload:!1},vueApp:"/app"},n=new class{constructor(){this.onceListeners={},this.listeners={},this.noOfPorts=0,this.ports={},this.connections={}}ipcmainevent(e){return{sender:e,reply:e.send}}addPort(s){const n=this.noOfPorts;this.ports[n]=s,this.connections[n]=new e(s,n),this.noOfPorts++;const t=this.connections[n];return s.addEventListener("message",(e=>{var s;console.log("IPCMain: Recived message ",e.data," from renderer ",n),(null===(s=e.data)||void 0===s?void 0:s.channel)&&(this.listeners[e.data.channel]&&this.listeners[e.data.channel].forEach((s=>{var n;return s(this.ipcmainevent(t),...null===(n=e.data)||void 0===n?void 0:n.args)})),this.onceListeners[e.data.channel]&&(this.onceListeners[e.data.channel].forEach((s=>{var n;return s(this.ipcmainevent(t),...null===(n=e.data)||void 0===n?void 0:n.args)})),this.onceListeners[e.data.channel]=null))})),s.postMessage({toIpcClass:!0,id:n}),t}on(e,s){return console.log("IPCMain:Adding event listener to ",e),this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(s),this}once(e,s){return this.onceListeners[e]||(this.onceListeners[e]=[]),this.onceListeners[e].push(s),this}},t=new class{constructor(e,s){}connect(){return new Promise(((e,s)=>{this.socketAddress="http:"===location.protocol?"ws":"wss://"+location.host+"/api/dbmgmt",console.log("Web socket address",this.socketAddress),this.socket=new WebSocket(this.socketAddress),this.socket.onopen=s=>{e(!0)},this.socket.onerror=e=>{throw e}}))}async createDB(){}async closeDB(){}async runQuery(e,...s){return new Promise(((n,t)=>{const o=Math.floor(Math.random()*10**10);this.socket.send(JSON.stringify({query:e,args:s,queryId:o})),this.socket.addEventListener("message",(e=>{let s=JSON.parse(e.data);s.queryId===o&&n(s.reply)}))}))}}("any");t.connect();const o=new class{constructor(e,s,n){this.chitIpcMain=e,this.dbmgmt=s,this.events={},this.config=n}on(e,s){this.events[e]=s}initialise(){this.chitIpcMain.on("ping",(e=>{console.log("Recived ping from renderer"),console.log("Sending pong to the renderer"),e.sender.send("pong"),this.events.pingRecived()})),this.chitIpcMain.on("create-user",(async(e,s)=>{let n,t;console.log("\nRecived Message From Renderer to create user\n",e.sender.id,s);try{t=await this.dbmgmt.runQuery("createUser",s.name,s.phone,s.address)}catch(e){n=e}e.sender.send("create-user",n,null==t?void 0:t.result)})),this.chitIpcMain.on("create-group",(async(e,s)=>{let n,t;console.log("Recived message from Renderer to create group",e.sender.id,s);try{t=await this.dbmgmt.runQuery("createGroup",s.year,s.month,s.batch,s.members)}catch(e){n=e}e.sender.send("create-group",n,null==t?void 0:t.result)})),this.chitIpcMain.on("get-users-data",(async e=>{const s=await this.dbmgmt.runQuery("listUsers");console.log("Sending users data to the renderer"),e.sender.send("get-users-data",s)})),this.chitIpcMain.on("get-user-details",(async(e,s)=>{const n=await this.dbmgmt.runQuery("userDetails",s);console.log("Sending "+n.name+"'s data to the renderer"),e.sender.send("get-user-details",n)})),this.chitIpcMain.on("get-groups-data",(async e=>{console.log("Recived message from renderer to get groups data");const s=await this.dbmgmt.runQuery("listGroups");console.log("Sending groups data to the renderer."),e.sender.send("get-groups-data",s)})),this.chitIpcMain.on("open-forms",((e,s,n)=>{this.events.openForm(s,n)})),this.chitIpcMain.on("phone-exists",(async(e,s)=>{let n,t;console.log("Checking existance of phone number "+s);try{t=await this.dbmgmt.runQuery("checkPhone",s)}catch(e){n=e}console.log("Phone number "+(t?"":"does not ")+"exists"),e.sender.send("phone-exists",n,t)})),this.chitIpcMain.on("batch-exists",(async(e,s,n,t)=>{let o,i;console.log("Checking existance of Batch  "+s+" in month "+n);try{i=await this.dbmgmt.runQuery("checkBatch",s,n,t)}catch(e){o=e}console.log("Batch "+(i?"":"does not ")+"exists"),e.sender.send("batch-exists",o,i)})),this.chitIpcMain.on("show-message-box",((e,s)=>{this.events.showMessageBox(s,e.sender)})),this.chitIpcMain.on("show-dialog",(async(e,s,n)=>{let t;switch(s){case"open":t=await this.events.showOpenDialog(n,e.sender);break;case"messagebox":t=await this.events.showMessageBox(n,e.sender)}e.sender.send("show-dialog",t)})),this.chitIpcMain.on("open-external",((e,s)=>{this.events.openExternal(s)})),this.chitIpcMain.on("get-config",(e=>{e.returnValue=this.config})),this.chitIpcMain.on("update-config",(async(e,s)=>{console.log("Updating Configuration file ...");let n=!1;try{n=await this.events.updateConfig(s)}catch(s){throw e.sender.send("update-config",n),s}e.sender.send("update-config",n)})),this.chitIpcMain.on("db-run-query",(async(e,s,...n)=>{let t=await this.dbmgmt.runQuery(s,...n);e.sender.send("db-run-query",t)}))}}(n,t,s);self.addEventListener("connect",(e=>{const i=e.ports[0];i.start();const a=n.addPort(i);console.log(a),a.send("ipc",{command:"console",data:[t.socket.url,t.socketAddress]}),0===a.id&&(o.on("openExternal",(e=>{a.send("ipc",{command:"openExternal",url:e})})),o.on("openForm",((e,s)=>{a.send("ipc",{command:"openForm",type:e,args:s})})),o.on("pingRecived",(()=>{})),o.on("showMessageBox",((e,s)=>new Promise(((t,o)=>{s.send("ipc",{command:"showMessageBox",options:e}),n.once("ipc-showMessageBox",((e,s)=>{t(s)}))})))),o.on("showOpenDialog",(async()=>{})),o.on("updateConfig",(e=>new Promise(((s,t)=>{a.send("ipc",{command:"updateConfig",newConfig:e}),n.once("ipc-updateConfig",(e=>{s(!0)}))})))),o.initialise()),i.addEventListener("message",(e=>{var n;console.log("SharedWorker: Recived message ",e.data),"config"===(null===(n=e.data)||void 0===n?void 0:n.command)&&Object.keys(e.data.config).forEach((n=>{s[n]=e.data.config[n]}))}))}))}();
